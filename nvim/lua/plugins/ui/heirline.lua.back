-- local is_valid = function(bufnr)
-- 	if not bufnr then
-- 		bufnr = 0
-- 	end
-- 	return vim.api.nvim_buf_is_valid(bufnr) and vim.bo[bufnr].buflisted
-- end

-- local component = require("plugins.ui.lineUtil.component")
-- local condition = require("plugins.ui.lineUtil.condition")
-- local hl = require("plugins.ui.lineUtil.hl")
-- local heirline = require("plugins.ui.lineUtil._heirline")
-- local provider = require("plugins.ui.lineUtil.provider")
local status = require("plugins.ui.lineUtil")
local opts = function(_, opts)
	opts.statusline = { -- statusline
		hl = { fg = "fg", bg = "bg" },
		status.component.mode({ mode_text = { padding = { left = 1, right = 1 } } }), -- add the mode text
		status.component.git_branch(),
		status.component.file_info({ filetype = {}, filename = false, file_modified = false }),
		status.component.git_diff(),
		status.component.diagnostics(),
		status.component.fill(),
		status.component.cmd_info(),
		status.component.fill(),
		status.component.lsp(),
		status.component.treesitter(),
		status.component.nav(),
		-- remove the 2nd mode indicator on the right
	}

	return opts
end

-- local Statusline = { -- ine
-- 	hl = { fg = "fg", bg = "bg" },
-- 	component.mode({ mode_text = { padding = { left = 1, right = 1 } } }),
-- 	component.git_branch(),
-- 	component.file_info({ filetype = {}, filename = false, file_modified = false }),
-- 	component.git_diff(),
-- 	component.diagnostics(),
-- 	component.fill(),
-- 	component.cmd_info(),
-- 	component.fill(),
-- 	component.lsp(),
-- 	component.treesitter(),
-- 	component.nav(),
-- 	-- component.mode({ surround = { separator = "right" } }),
-- }
-- local WinBar = { -- winbar
-- 	init = function(self)
-- 		self.bufnr = vim.api.nvim_get_current_buf()
-- 	end,
-- 	fallthrough = false,
-- 	{
-- 		condition = function()
-- 			return not condition.is_active()
-- 		end,
-- 		component.separated_path(),
-- 		component.file_info({
-- 			file_icon = { hl = hl.file_icon("winbar"), padding = { left = 0 } },
-- 			file_modified = false,
-- 			file_read_only = false,
-- 			hl = hl.get_attributes("winbarnc", true),
-- 			surround = false,
-- 			update = "BufEnter",
-- 		}),
-- 	},
-- 	component.breadcrumbs({ hl = hl.get_attributes("winbar", true) }),
-- }
--
-- local TabLine = { -- bufferline
-- 	{ -- file tree padding
-- 		condition = function(self)
-- 			self.winid = vim.api.nvim_tabpage_list_wins(0)[1]
-- 			return condition.buffer_matches({
-- 				filetype = {
-- 					"NvimTree",
-- 					"OverseerList",
-- 					"aerial",
-- 					"dap%-repl",
-- 					"dapui_.",
-- 					"edgy",
-- 					"neo%-tree",
-- 					"undotree",
-- 				},
-- 			}, vim.api.nvim_win_get_buf(self.winid))
-- 		end,
-- 		provider = function(self)
-- 			return string.rep(" ", vim.api.nvim_win_get_width(self.winid) + 1)
-- 		end,
-- 		hl = { bg = "tabline_bg" },
-- 	},
-- 	heirline.make_buflist(component.tabline_file_info()), -- component for each buffer tab
-- 	component.fill({ hl = { bg = "tabline_bg" } }), -- fill the rest of the tabline with background color
-- 	{ -- tab list
-- 		condition = function()
-- 			return #vim.api.nvim_list_tabpages() >= 2
-- 		end, -- only show tabs if there are more than one
-- 		heirline.make_tablist({ -- component for each tab
-- 			provider = provider.tabnr(),
-- 			hl = function(self)
-- 				return hl.get_attributes(heirline.tab_type(self, "tab"), true)
-- 			end,
-- 		}),
-- 		{ -- close button for current tab
-- 			provider = provider.close_button({
-- 				kind = "TabClose",
-- 				padding = { left = 1, right = 1 },
-- 			}),
-- 			hl = hl.get_attributes("tab_close", true),
-- 			on_click = {
-- 				callback = function()
-- 					require("astronvim.utils.buffer").close_tab()
-- 				end,
-- 				name = "heirline_tabline_close_tab_callback",
-- 			},
-- 		},
-- 	},
-- }
-- local olumn = vim.fn.has("nvim-0.9") == 1
-- 		and {
-- 			init = function(self)
-- 				self.bufnr = vim.api.nvim_get_current_buf()
-- 			end,
-- 			component.foldcolumn(),
-- 			component.fill(),
-- 			component.numbercolumn(),
-- 			component.signcolumn(),
-- 		}
-- 	or nil
-- local Opts = {
-- 	disable_winbar_cb = function(args)
-- 		return not is_valid(args.buf)
-- 			or condition.buffer_matches({
-- 				buftype = { "terminal", "prompt", "nofile", "help", "quickfix" },
-- 				filetype = { "NvimTree", "neo%-tree", "dashboard", "Outline", "aerial" },
-- 			}, args.buf)
-- 	end,
-- }
-- local opts = {
-- 	statusline = Statusline,
-- 	winbar = WinBar,
-- 	tabline = TabLine,
-- 	olumn = olumn,
-- 	opts = Opts,
-- }
local setup = require("plugins.ui.lineUtil.temp")
setup(opts)
--[[ require("heirline").setup(opts) ]]
